@using KeyChordFinder.Services
@implements IDisposable
@page "/metronome"
@inject PlayAudio PlayAudioService

<MudContainer Class="mt-5" MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4" Class="mb-4">Metronome</MudText>

    <MudPaper Class="pa-4 mb-4">

        <div class="d-flex justify-content-between">
            <MudText Typo="Typo.h6">Settings</MudText>
            <MudToggleIconButton
                Toggled="@_isPlaying"
                Icon="@Icons.Material.Filled.PlayArrow"
                Color="@Color.Success"
                ToggledIcon="@Icons.Material.Filled.Stop"
                ToggledColor="@Color.Error"
                ToggledChanged="PlayStopButton"/>
        </div>
        <MudPaper Class="pa-4 mb-4">
            <MudSlider Variant="Variant.Filled"
                       Label="Volume"
                       Value="@_volume"
                       Min="0"
                       Max="1"
                       Step="0.01"
                       ValueChanged="@((double value) => OnVolumeChanged(value))"/>
            <MudText Typo="Typo.subtitle2">Volume</MudText>
        </MudPaper>
        <MudPaper Class="pa-4 mb-4">
            <MudNumericField Value="@_bpm"
                             Label="BPM"
                             Variant="Variant.Text"
                             Min="1"
                             Max="222"
                             ValueChanged="@((int value) => OnBpmChanged(value))"/>
        </MudPaper>
        <MudPaper Class="pa-4 mb-4">
            <MudSelect Value="@_selectedSound"
                       Label="Select Sound"
                       ValueChanged="@((string value) => OnSoundChanged(value))">
                @foreach (var sound in _soundOptions)
                {
                    <MudSelectItem Value="@sound">@sound</MudSelectItem>
                }
            </MudSelect>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private bool _isPlaying;
    private string _selectedSound = "HiHat";
    private double _volume = 0.8;
    private int _bpm = 120;

    private readonly List<string?> _soundOptions = PlayAudio.GetMetronomeSampleNames();

    private void PlayStopButton(bool toggled)
    {
        _isPlaying = toggled;
        PlayOrRestartMetronome();
    }

    private void OnVolumeChanged(double value)
    {
        _volume = value;
        if (_isPlaying)
        {
            PlayOrRestartMetronome();
        }
    }
    private void OnBpmChanged(int value)
    {
        _bpm = value;
        if (_isPlaying)
        {
            PlayOrRestartMetronome();
        }
    }
    private void OnSoundChanged(string value)
    {
        _selectedSound = value;
        if (_isPlaying)
        {
            PlayOrRestartMetronome();
        }
    }

    private void PlayOrRestartMetronome()
    {
        PlayAudioService.StopMetronome();
        if (_isPlaying)
        {
            PlayAudioService.ToggleMetronome(_selectedSound, _bpm, _volume);
        }
    }
    
    public void Dispose()
    {
        if (!_isPlaying) return;
        PlayAudioService.StopMetronome();
        _isPlaying = false;
    }
}