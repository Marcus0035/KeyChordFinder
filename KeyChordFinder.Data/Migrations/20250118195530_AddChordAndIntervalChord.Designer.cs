// <auto-generated />
using KeyChordFinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeyChordFinder.Data.Migrations
{
    [DbContext(typeof(KeyChordFinderDbContext))]
    [Migration("20250118195530_AddChordAndIntervalChord")]
    partial class AddChordAndIntervalChord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("KeyChordFinder.Data.Model.Chord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Chords");
                });

            modelBuilder.Entity("KeyChordFinder.Data.Model.Interval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervalValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Intervals");
                });

            modelBuilder.Entity("KeyChordFinder.Data.Model.IntervalChord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChordId");

                    b.HasIndex("IntervalId");

                    b.ToTable("IntervalChord");
                });

            modelBuilder.Entity("KeyChordFinder.Data.Model.IntervalScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IntervalId");

                    b.HasIndex("ScaleId");

                    b.ToTable("IntervalScale");
                });

            modelBuilder.Entity("KeyChordFinder.Data.Model.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Octave")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pitch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("KeyChordFinder.Data.Model.Scale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Scales");
                });

            modelBuilder.Entity("KeyChordFinder.Data.Model.IntervalChord", b =>
                {
                    b.HasOne("KeyChordFinder.Data.Model.Chord", "Chord")
                        .WithMany()
                        .HasForeignKey("ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyChordFinder.Data.Model.Interval", "Interval")
                        .WithMany()
                        .HasForeignKey("IntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chord");

                    b.Navigation("Interval");
                });

            modelBuilder.Entity("KeyChordFinder.Data.Model.IntervalScale", b =>
                {
                    b.HasOne("KeyChordFinder.Data.Model.Interval", "Interval")
                        .WithMany()
                        .HasForeignKey("IntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyChordFinder.Data.Model.Scale", "Scale")
                        .WithMany()
                        .HasForeignKey("ScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interval");

                    b.Navigation("Scale");
                });
#pragma warning restore 612, 618
        }
    }
}
